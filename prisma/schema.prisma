datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}
generator client{
  provider = "prisma-client-js"
}

enum UserRole{
  ADMIN
  USER
}

enum MessageRole{
  aiflavoured
  human
}
enum Generator{
  user
  aiflavoured
}

enum SubscriptionStatus {
  free
  premium
  unlimited
}
enum SubscriptionType {
  monthly
  annually
}

model User {
  id            String      @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  password      String?  
  role          UserRole @default(USER)
  subscription  SubscriptionStatus   @default(free)
  subscriptionQuotas  subscriptionQuota[]   
  accountCreationTimestamp  DateTime @default(now())
  timeZone      String 
  isTwoFAEnabled Boolean @default(false)
  twoFAConfirmation    TwoFAConfirmation?
  uploads      UserFile[]
  chatSessions  session[]
  userPromptImages userPromptImage[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken{
  id     String @id @default(cuid())
  email  String
  token  String @unique
  expires DateTime

  @@unique([email,token])
}

model ResetPasswordToken{
  id     String @id @default(cuid())
  email  String
  token  String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFAToken{
  id     String @id @default(cuid())
  email  String
  token  String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFAConfirmation{
  id       Int @id @default(autoincrement())
  userId   String
  user     User @relation(fields:[userId],references:[id],onDelete: Cascade)
  @@unique([userId])
}

// This is the AIMemory model { UserID and FileKey is Stored into the metadata}
model session {
  session     String  @id @default(cuid())
  sessionType String 
  chatName   String?
  userId     String
  timestamp  DateTime      @default(now())
  messages   messageHistory[]
  userFiles  UserFile[]
  userPromptImages userPromptImage[]
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  aipresentationData aipresentationData?
  @@unique([userId, session])
}

model AIMemory {
  id        Int @id @default(autoincrement())
  content   String
  metadata  Json
  vector    Unsupported("vector(3072)")?
}
model UserFile {
  id        Int   @id @default(autoincrement())
  userId    String
  fileKey   String
  fileName  String
  url       String
  session   String 
  theme     String?
  generator Generator @default(user)
  fileType  String @default("")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatSession session @relation(fields: [session], references: [session], onDelete :Cascade) 

  @@unique([userId, fileKey])
}


model messageHistory {
  id          Int           @id @default(autoincrement())
  session      String        @db.VarChar(255) 
  title       String?
  message     String    
  role        MessageRole    
  timestamp   DateTime      @default(now())

  chatSession session @relation(fields: [session], references: [session], onDelete : Cascade)

  @@index([session])
}

model aipresentationData {
  id  String  @id @default(cuid())
  presentationSession String @unique
  author  String
  title   String
  pptxData  Json   
  presentationImage Json
  imageSearch  String
  waterMark  Boolean @default(true)
  variant  String?
  createdAt  DateTime? @default(now())
  chatSession session @relation(fields: [presentationSession], references: [session], onDelete: Cascade)
}
model userPromptImage {
  id        String @id @default(cuid())
  userId    String
  session   String 
  fileKey   String
  fileName  String
  url       String
  fileType  String
  prompt    String 
  like      Boolean?
  generator Generator @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Session session @relation(fields: [session], references: [session], onDelete : Cascade) 

  @@unique([userId, fileKey])
}


model subscriptionQuota{
  id  String  @id @default(cuid())
  userId   String @unique
  subscription   DateTime @default(now())
  renewal   DateTime? @default(now())
  subscriptionStatus   SubscriptionStatus @default(free)
  aiChatWithDoc   Int @default(2)
  aipresentation   Int @default(1)
  gpt3_5Questions   Int @default(1000) 
  gpt4Question   Int @default(0)
  gpt4oQuestion   Int @default(0)
  aiImages    Int @default(0)
  aiVoices   Int? @default(0)
  textToSpeech Int @default (0)
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

