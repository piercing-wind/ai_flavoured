generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("AZURE_PG_CONNECTION_STRIGN")
}

model User {
  id                       String             @id @default(uuid())
  name                     String?
  email                    String?            @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  role                     UserRole           @default(USER)
  subscription             SubscriptionStatus @default(free)
  accountCreationTimestamp DateTime           @default(now())
  timeZone                 String
  isTwoFAEnabled           Boolean            @default(false)
  accounts                 Account[]
  twoFAConfirmation        TwoFAConfirmation?
  uploads                  UserFile[]
  chatSessions             session[]
  subscriptionQuotas       subscriptionQuota?
  userAudio                userPromptAudio[]
  userPromptImages         userPromptImage[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFAToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFAConfirmation {
  id     Int    @id @default(autoincrement())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model session {
  session            String              @id @default(cuid())
  sessionType        String
  chatName           String?
  userId             String
  timestamp          DateTime            @default(now())
  userFiles          UserFile[]
  aipresentationData aipresentationData?
  messages           messageHistory[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userPromptAudios   userPromptAudio[]
  userPromptImages   userPromptImage[]

  @@unique([userId, session])
}

model AIMemory {
  id       Int                    @id @default(autoincrement())
  content  String
  metadata Json
  vector   Unsupported("vector")?
}

model UserFile {
  id          Int       @id @default(autoincrement())
  userId      String
  fileKey     String
  fileName    String
  url         String
  session     String
  theme       String?
  generator   Generator @default(user)
  fileType    String    @default("")
  createdAt   DateTime  @default(now())
  chatSession session   @relation(fields: [session], references: [session], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, fileKey])
}

model messageHistory {
  id          Int         @id @default(autoincrement())
  session     String      @db.VarChar(255)
  title       String?
  message     String
  role        MessageRole
  timestamp   DateTime    @default(now())
  chatSession session     @relation(fields: [session], references: [session], onDelete: Cascade)

  @@index([session])
}

model aipresentationData {
  id                  String    @id @default(cuid())
  presentationSession String    @unique
  author              String
  title               String
  pptxData            Json
  presentationImage   Json
  imageSearch         String
  waterMark           Boolean   @default(true)
  variant             String?
  createdAt           DateTime? @default(now())
  chatSession         session   @relation(fields: [presentationSession], references: [session], onDelete: Cascade)
}

model userPromptImage {
  id        String     @id @default(cuid())
  userId    String
  session   String
  prompt    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  images    aiImages[]
  
  Session   session    @relation(fields: [session], references: [session], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model aiImages {
  id                String          @id @default(cuid())
  userPromptImageId String
  fileKey           String
  fileName          String
  url               String
  fileType          String
  like              Boolean?
  upscaled          Boolean?
  generator         Generator       @default(user)
  imageModel        ImageGenerator
  userPromptImage   userPromptImage @relation(fields: [userPromptImageId], references: [id], onDelete: Cascade)
}

model userPromptAudio {
  id        String   @id @default(cuid())
  userId    String
  session   String
  prompt    String
  audioUrl  String
  fileName  String
  fileKey   String
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Session   session  @relation(fields: [session], references: [session], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model subscriptionQuota {
  id                 String             @id @default(cuid())
  userId             String             @unique
  subscription       DateTime           @default(now())
  renewal            DateTime?          @default(now())
  subscriptionStatus SubscriptionStatus @default(free)
  aiChatWithDoc      Int                @default(2)
  aipresentation     Int                @default(0)
  gpt3_5Question     Int                @default(10)
  gpt4Question       Int                @default(0)
  gpt4oQuestion      Int                @default(2)
  aiImages           Int                @default(2)
  textToSpeech       Int                @default(1)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model support {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  subject     String
  description String
  submittedBy String
  file        String[]
}

enum UserRole {
  ADMIN
  USER
}

enum MessageRole {
  aiflavoured
  human
}

enum Generator {
  user
  aiflavoured
}

enum ImageGenerator {
  sdxl
  dalle
}

enum SubscriptionStatus {
  free
  premium
  unlimited
}

enum SubscriptionType {
  monthly
  annually
}
